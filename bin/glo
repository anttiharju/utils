#!/bin/sh
set -eu

# Git Log Oneline
# Either print specified number of commits 'glo 5' or rely on sensible defaults.

# Determine default branch
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
	default_branch=$(git rev-parse --abbrev-ref origin/HEAD)
	default_branch=$(echo "$default_branch" | sed 's|^origin/||')
else
	echo "Error: glo must be run in a Git repository."
	exit 1
fi

# Determine current branch
branch=$(git rev-parse --abbrev-ref HEAD)

# Base git log command
git_cmd="git log --oneline"

# If on branch other than default branch, reverse order to match PR commits tab commit order.
match_ui() {
	if [ "$branch" != "$default_branch" ]; then
		git_cmd="$git_cmd --reverse"
	fi
}

# Function for executing git command and to exit with its status code.
execute() {
	match_ui
	eval "$git_cmd"
	exit $?
}

# Set n to empty string if $1 is unbound.
n="${1:-}"

# If number of commits is specified, show exactly that many commits.
# Intended to take precedence over other options.
if [ -n "$n" ]; then
	git_cmd="$git_cmd -$n"
	execute
fi

# Function for preventing scrolling of printed commits.
no_scroll() {
	terminal_height=$(($(tput lines) - 2)) # Deduct 2 (1 for cmd, 1 for prompt).
	line_count=$(eval "$git_cmd | wc -l") # Count how many commits would be printed.

	if [ "$line_count" -gt "$terminal_height" ]; then
		git_cmd="$git_cmd -$terminal_height"
	fi
}

# If on default branch, show all commits.
if [ "$branch" = "$default_branch" ]; then
	no_scroll # Or however many fit in the terminal.
	execute
fi

# Otherwise on some other branch, therefore compare to default branch.
git_cmd="$git_cmd $default_branch.."
no_scroll
execute
